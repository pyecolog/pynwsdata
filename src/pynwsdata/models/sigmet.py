# coding: utf-8

"""
    weather.gov API

    weather.gov API

    The version of the OpenAPI document: 1.13.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class Sigmet(BaseModel):
    """
    Sigmet
    """ # noqa: E501
    id: Optional[StrictStr] = None
    issue_time: Optional[datetime] = Field(default=None, alias="issueTime")
    fir: Optional[StrictStr] = None
    atsu: Optional[Annotated[str, Field(strict=True)]] = Field(default=None, description="ATSU Identifier")
    sequence: Optional[StrictStr] = None
    phenomenon: Optional[StrictStr] = None
    start: Optional[datetime] = None
    end: Optional[datetime] = None
    __properties: ClassVar[List[str]] = ["id", "issueTime", "fir", "atsu", "sequence", "phenomenon", "start", "end"]

    @field_validator('atsu')
    def atsu_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^[A-Z]{3,4}$", value):
            raise ValueError(r"must validate the regular expression /^[A-Z]{3,4}$/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Sigmet from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if fir (nullable) is None
        # and model_fields_set contains the field
        if self.fir is None and "fir" in self.model_fields_set:
            _dict['fir'] = None

        # set to None if sequence (nullable) is None
        # and model_fields_set contains the field
        if self.sequence is None and "sequence" in self.model_fields_set:
            _dict['sequence'] = None

        # set to None if phenomenon (nullable) is None
        # and model_fields_set contains the field
        if self.phenomenon is None and "phenomenon" in self.model_fields_set:
            _dict['phenomenon'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Sigmet from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "issueTime": obj.get("issueTime"),
            "fir": obj.get("fir"),
            "atsu": obj.get("atsu"),
            "sequence": obj.get("sequence"),
            "phenomenon": obj.get("phenomenon"),
            "start": obj.get("start"),
            "end": obj.get("end")
        })
        return _obj



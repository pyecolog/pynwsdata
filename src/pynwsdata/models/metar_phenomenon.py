# coding: utf-8

"""
    weather.gov API

    weather.gov API

    The version of the OpenAPI document: 1.13.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class MetarPhenomenon(BaseModel):
    """
    An object representing a decoded METAR phenomenon string.
    """ # noqa: E501
    intensity: Optional[StrictStr]
    modifier: Optional[StrictStr]
    weather: StrictStr
    raw_string: StrictStr = Field(alias="rawString")
    in_vicinity: Optional[StrictBool] = Field(default=None, alias="inVicinity")
    __properties: ClassVar[List[str]] = ["intensity", "modifier", "weather", "rawString", "inVicinity"]

    @field_validator('intensity')
    def intensity_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['light', 'heavy']):
            raise ValueError("must be one of enum values ('light', 'heavy')")
        return value

    @field_validator('modifier')
    def modifier_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['patches', 'blowing', 'low_drifting', 'freezing', 'shallow', 'partial', 'showers']):
            raise ValueError("must be one of enum values ('patches', 'blowing', 'low_drifting', 'freezing', 'shallow', 'partial', 'showers')")
        return value

    @field_validator('weather')
    def weather_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['fog_mist', 'dust_storm', 'dust', 'drizzle', 'funnel_cloud', 'fog', 'smoke', 'hail', 'snow_pellets', 'haze', 'ice_crystals', 'ice_pellets', 'dust_whirls', 'spray', 'rain', 'sand', 'snow_grains', 'snow', 'squalls', 'sand_storm', 'thunderstorms', 'unknown', 'volcanic_ash']):
            raise ValueError("must be one of enum values ('fog_mist', 'dust_storm', 'dust', 'drizzle', 'funnel_cloud', 'fog', 'smoke', 'hail', 'snow_pellets', 'haze', 'ice_crystals', 'ice_pellets', 'dust_whirls', 'spray', 'rain', 'sand', 'snow_grains', 'snow', 'squalls', 'sand_storm', 'thunderstorms', 'unknown', 'volcanic_ash')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MetarPhenomenon from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if intensity (nullable) is None
        # and model_fields_set contains the field
        if self.intensity is None and "intensity" in self.model_fields_set:
            _dict['intensity'] = None

        # set to None if modifier (nullable) is None
        # and model_fields_set contains the field
        if self.modifier is None and "modifier" in self.model_fields_set:
            _dict['modifier'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MetarPhenomenon from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "intensity": obj.get("intensity"),
            "modifier": obj.get("modifier"),
            "weather": obj.get("weather"),
            "rawString": obj.get("rawString"),
            "inVicinity": obj.get("inVicinity")
        })
        return _obj



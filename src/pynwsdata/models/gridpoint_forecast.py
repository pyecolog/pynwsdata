# coding: utf-8

"""
    weather.gov API

    weather.gov API

    The version of the OpenAPI document: 1.13.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from pynwsdata.models.gridpoint_forecast_period import GridpointForecastPeriod
from pynwsdata.models.gridpoint_forecast_units import GridpointForecastUnits
from pynwsdata.models.iso8601_interval import ISO8601Interval
from pynwsdata.models.json_ld_context import JsonLdContext
from pynwsdata.models.quantitative_value import QuantitativeValue
from typing import Optional, Set
from typing_extensions import Self

class GridpointForecast(BaseModel):
    """
    A multi-day forecast for a 2.5km grid square.
    """ # noqa: E501
    context: Optional[JsonLdContext] = Field(default=None, alias="@context")
    geometry: Optional[StrictStr] = Field(default=None, description="A geometry represented in Well-Known Text (WKT) format.")
    units: Optional[GridpointForecastUnits] = GridpointForecastUnits.US
    forecast_generator: Optional[StrictStr] = Field(default=None, description="The internal generator class used to create the forecast text (used for NWS debugging).", alias="forecastGenerator")
    generated_at: Optional[datetime] = Field(default=None, description="The time this forecast data was generated.", alias="generatedAt")
    update_time: Optional[datetime] = Field(default=None, description="The last update time of the data this forecast was generated from.", alias="updateTime")
    valid_times: Optional[ISO8601Interval] = Field(default=None, alias="validTimes")
    elevation: Optional[QuantitativeValue] = None
    periods: Optional[List[GridpointForecastPeriod]] = Field(default=None, description="An array of forecast periods.")
    __properties: ClassVar[List[str]] = ["@context", "geometry", "units", "forecastGenerator", "generatedAt", "updateTime", "validTimes", "elevation", "periods"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GridpointForecast from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of context
        if self.context:
            _dict['@context'] = self.context.to_dict()
        # override the default output from pydantic by calling `to_dict()` of valid_times
        if self.valid_times:
            _dict['validTimes'] = self.valid_times.to_dict()
        # override the default output from pydantic by calling `to_dict()` of elevation
        if self.elevation:
            _dict['elevation'] = self.elevation.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in periods (list)
        _items = []
        if self.periods:
            for _item in self.periods:
                if _item:
                    _items.append(_item.to_dict())
            _dict['periods'] = _items
        # set to None if geometry (nullable) is None
        # and model_fields_set contains the field
        if self.geometry is None and "geometry" in self.model_fields_set:
            _dict['geometry'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GridpointForecast from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "@context": JsonLdContext.from_dict(obj["@context"]) if obj.get("@context") is not None else None,
            "geometry": obj.get("geometry"),
            "units": obj.get("units") if obj.get("units") is not None else GridpointForecastUnits.US,
            "forecastGenerator": obj.get("forecastGenerator"),
            "generatedAt": obj.get("generatedAt"),
            "updateTime": obj.get("updateTime"),
            "validTimes": ISO8601Interval.from_dict(obj["validTimes"]) if obj.get("validTimes") is not None else None,
            "elevation": QuantitativeValue.from_dict(obj["elevation"]) if obj.get("elevation") is not None else None,
            "periods": [GridpointForecastPeriod.from_dict(_item) for _item in obj["periods"]] if obj.get("periods") is not None else None
        })
        return _obj



# coding: utf-8

"""
    weather.gov API

    weather.gov API

    The version of the OpenAPI document: 1.13.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from pynwsdata.models.quantitative_value import QuantitativeValue
from typing import Optional, Set
from typing_extensions import Self

class GridpointWeatherValuesInnerValueInner(BaseModel):
    """
    A value object representing expected weather phenomena.
    """ # noqa: E501
    coverage: Optional[StrictStr]
    weather: Optional[StrictStr]
    intensity: Optional[StrictStr]
    visibility: QuantitativeValue
    attributes: List[StrictStr]
    __properties: ClassVar[List[str]] = ["coverage", "weather", "intensity", "visibility", "attributes"]

    @field_validator('coverage')
    def coverage_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['areas', 'brief', 'chance', 'definite', 'few', 'frequent', 'intermittent', 'isolated', 'likely', 'numerous', 'occasional', 'patchy', 'periods', 'scattered', 'slight_chance', 'widespread']):
            raise ValueError("must be one of enum values ('areas', 'brief', 'chance', 'definite', 'few', 'frequent', 'intermittent', 'isolated', 'likely', 'numerous', 'occasional', 'patchy', 'periods', 'scattered', 'slight_chance', 'widespread')")
        return value

    @field_validator('weather')
    def weather_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['blowing_dust', 'blowing_sand', 'blowing_snow', 'drizzle', 'fog', 'freezing_fog', 'freezing_drizzle', 'freezing_rain', 'freezing_spray', 'frost', 'hail', 'haze', 'ice_crystals', 'ice_fog', 'rain', 'rain_showers', 'sleet', 'smoke', 'snow', 'snow_showers', 'thunderstorms', 'volcanic_ash', 'water_spouts']):
            raise ValueError("must be one of enum values ('blowing_dust', 'blowing_sand', 'blowing_snow', 'drizzle', 'fog', 'freezing_fog', 'freezing_drizzle', 'freezing_rain', 'freezing_spray', 'frost', 'hail', 'haze', 'ice_crystals', 'ice_fog', 'rain', 'rain_showers', 'sleet', 'smoke', 'snow', 'snow_showers', 'thunderstorms', 'volcanic_ash', 'water_spouts')")
        return value

    @field_validator('intensity')
    def intensity_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['very_light', 'light', 'moderate', 'heavy']):
            raise ValueError("must be one of enum values ('very_light', 'light', 'moderate', 'heavy')")
        return value

    @field_validator('attributes')
    def attributes_validate_enum(cls, value):
        """Validates the enum"""
        for i in value:
            if i not in set(['damaging_wind', 'dry_thunderstorms', 'flooding', 'gusty_wind', 'heavy_rain', 'large_hail', 'small_hail', 'tornadoes']):
                raise ValueError("each list item must be one of ('damaging_wind', 'dry_thunderstorms', 'flooding', 'gusty_wind', 'heavy_rain', 'large_hail', 'small_hail', 'tornadoes')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GridpointWeatherValuesInnerValueInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of visibility
        if self.visibility:
            _dict['visibility'] = self.visibility.to_dict()
        # set to None if coverage (nullable) is None
        # and model_fields_set contains the field
        if self.coverage is None and "coverage" in self.model_fields_set:
            _dict['coverage'] = None

        # set to None if weather (nullable) is None
        # and model_fields_set contains the field
        if self.weather is None and "weather" in self.model_fields_set:
            _dict['weather'] = None

        # set to None if intensity (nullable) is None
        # and model_fields_set contains the field
        if self.intensity is None and "intensity" in self.model_fields_set:
            _dict['intensity'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GridpointWeatherValuesInnerValueInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "coverage": obj.get("coverage"),
            "weather": obj.get("weather"),
            "intensity": obj.get("intensity"),
            "visibility": QuantitativeValue.from_dict(obj["visibility"]) if obj.get("visibility") is not None else None,
            "attributes": obj.get("attributes")
        })
        return _obj



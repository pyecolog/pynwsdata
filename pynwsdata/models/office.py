# coding: utf-8

"""
    weather.gov API

    weather.gov API

    The version of the OpenAPI document: 1.13.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from pynwsdata.models.json_ld_context import JsonLdContext
from pynwsdata.models.office_address import OfficeAddress
from typing import Optional, Set
from typing_extensions import Self

class Office(BaseModel):
    """
    Office
    """ # noqa: E501
    context: Optional[JsonLdContext] = Field(default=None, alias="@context")
    type: Optional[StrictStr] = Field(default=None, alias="@type")
    id: Optional[StrictStr] = Field(default=None, alias="@id")
    id: Optional[StrictStr] = None
    name: Optional[StrictStr] = None
    address: Optional[OfficeAddress] = None
    telephone: Optional[StrictStr] = None
    fax_number: Optional[StrictStr] = Field(default=None, alias="faxNumber")
    email: Optional[StrictStr] = None
    same_as: Optional[StrictStr] = Field(default=None, alias="sameAs")
    nws_region: Optional[StrictStr] = Field(default=None, alias="nwsRegion")
    parent_organization: Optional[StrictStr] = Field(default=None, alias="parentOrganization")
    responsible_counties: Optional[List[StrictStr]] = Field(default=None, alias="responsibleCounties")
    responsible_forecast_zones: Optional[List[StrictStr]] = Field(default=None, alias="responsibleForecastZones")
    responsible_fire_zones: Optional[List[StrictStr]] = Field(default=None, alias="responsibleFireZones")
    approved_observation_stations: Optional[List[StrictStr]] = Field(default=None, alias="approvedObservationStations")
    __properties: ClassVar[List[str]] = ["@context", "@type", "@id", "id", "name", "address", "telephone", "faxNumber", "email", "sameAs", "nwsRegion", "parentOrganization", "responsibleCounties", "responsibleForecastZones", "responsibleFireZones", "approvedObservationStations"]

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['GovernmentOrganization']):
            raise ValueError("must be one of enum values ('GovernmentOrganization')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Office from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of context
        if self.context:
            _dict['@context'] = self.context.to_dict()
        # override the default output from pydantic by calling `to_dict()` of address
        if self.address:
            _dict['address'] = self.address.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Office from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "@context": JsonLdContext.from_dict(obj["@context"]) if obj.get("@context") is not None else None,
            "@type": obj.get("@type"),
            "@id": obj.get("@id"),
            "id": obj.get("id"),
            "name": obj.get("name"),
            "address": OfficeAddress.from_dict(obj["address"]) if obj.get("address") is not None else None,
            "telephone": obj.get("telephone"),
            "faxNumber": obj.get("faxNumber"),
            "email": obj.get("email"),
            "sameAs": obj.get("sameAs"),
            "nwsRegion": obj.get("nwsRegion"),
            "parentOrganization": obj.get("parentOrganization"),
            "responsibleCounties": obj.get("responsibleCounties"),
            "responsibleForecastZones": obj.get("responsibleForecastZones"),
            "responsibleFireZones": obj.get("responsibleFireZones"),
            "approvedObservationStations": obj.get("approvedObservationStations")
        })
        return _obj



# coding: utf-8

"""
    weather.gov API

    weather.gov API

    The version of the OpenAPI document: 1.13.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from pynwsdata.models.alert_atom_entry_author import AlertAtomEntryAuthor
from pynwsdata.models.alert_xml_parameter import AlertXMLParameter
from typing import Optional, Set
from typing_extensions import Self

class AlertAtomEntry(BaseModel):
    """
    An alert entry in an Atom feed
    """ # noqa: E501
    id: Optional[StrictStr] = None
    updated: Optional[StrictStr] = None
    published: Optional[StrictStr] = None
    author: Optional[AlertAtomEntryAuthor] = None
    summary: Optional[StrictStr] = None
    event: Optional[StrictStr] = None
    sent: Optional[StrictStr] = None
    effective: Optional[StrictStr] = None
    expires: Optional[StrictStr] = None
    status: Optional[StrictStr] = None
    msg_type: Optional[StrictStr] = Field(default=None, alias="msgType")
    category: Optional[StrictStr] = None
    urgency: Optional[StrictStr] = None
    severity: Optional[StrictStr] = None
    certainty: Optional[StrictStr] = None
    area_desc: Optional[StrictStr] = Field(default=None, alias="areaDesc")
    polygon: Optional[StrictStr] = None
    geocode: Optional[List[AlertXMLParameter]] = None
    parameter: Optional[List[AlertXMLParameter]] = None
    __properties: ClassVar[List[str]] = ["id", "updated", "published", "author", "summary", "event", "sent", "effective", "expires", "status", "msgType", "category", "urgency", "severity", "certainty", "areaDesc", "polygon", "geocode", "parameter"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AlertAtomEntry from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of author
        if self.author:
            _dict['author'] = self.author.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in geocode (list)
        _items = []
        if self.geocode:
            for _item in self.geocode:
                if _item:
                    _items.append(_item.to_dict())
            _dict['geocode'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in parameter (list)
        _items = []
        if self.parameter:
            for _item in self.parameter:
                if _item:
                    _items.append(_item.to_dict())
            _dict['parameter'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AlertAtomEntry from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "updated": obj.get("updated"),
            "published": obj.get("published"),
            "author": AlertAtomEntryAuthor.from_dict(obj["author"]) if obj.get("author") is not None else None,
            "summary": obj.get("summary"),
            "event": obj.get("event"),
            "sent": obj.get("sent"),
            "effective": obj.get("effective"),
            "expires": obj.get("expires"),
            "status": obj.get("status"),
            "msgType": obj.get("msgType"),
            "category": obj.get("category"),
            "urgency": obj.get("urgency"),
            "severity": obj.get("severity"),
            "certainty": obj.get("certainty"),
            "areaDesc": obj.get("areaDesc"),
            "polygon": obj.get("polygon"),
            "geocode": [AlertXMLParameter.from_dict(_item) for _item in obj["geocode"]] if obj.get("geocode") is not None else None,
            "parameter": [AlertXMLParameter.from_dict(_item) for _item in obj["parameter"]] if obj.get("parameter") is not None else None
        })
        return _obj


